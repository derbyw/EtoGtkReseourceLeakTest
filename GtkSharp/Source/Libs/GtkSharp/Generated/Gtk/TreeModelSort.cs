// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class TreeModelSort : GLib.Object, Gtk.ITreeModel, Gtk.ITreeSortable, Gtk.ITreeDragSource {

		public TreeModelSort (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_sort_new_with_model(IntPtr child_model);
		static d_gtk_tree_model_sort_new_with_model gtk_tree_model_sort_new_with_model = FuncLoader.LoadFunction<d_gtk_tree_model_sort_new_with_model>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_new_with_model"));

		public TreeModelSort (Gtk.ITreeModel child_model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TreeModelSort)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (child_model != null) {
					names.Add ("model");
					vals.Add (new GLib.Value (child_model));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = gtk_tree_model_sort_new_with_model(child_model == null ? IntPtr.Zero : ((child_model is GLib.Object) ? (child_model as GLib.Object).Handle : (child_model as Gtk.TreeModelAdapter).Handle));
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_sort_get_model(IntPtr raw);
		static d_gtk_tree_model_sort_get_model gtk_tree_model_sort_get_model = FuncLoader.LoadFunction<d_gtk_tree_model_sort_get_model>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_get_model"));

		[GLib.Property ("model")]
		public Gtk.ITreeModel Model {
			get  {
				IntPtr raw_ret = gtk_tree_model_sort_get_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gtk_reserved1"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, null
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_sort_clear_cache(IntPtr raw);
		static d_gtk_tree_model_sort_clear_cache gtk_tree_model_sort_clear_cache = FuncLoader.LoadFunction<d_gtk_tree_model_sort_clear_cache>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_clear_cache"));

		public void ClearCache() {
			gtk_tree_model_sort_clear_cache(Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_sort_convert_child_iter_to_iter(IntPtr raw, IntPtr sort_iter, IntPtr child_iter);
		static d_gtk_tree_model_sort_convert_child_iter_to_iter gtk_tree_model_sort_convert_child_iter_to_iter = FuncLoader.LoadFunction<d_gtk_tree_model_sort_convert_child_iter_to_iter>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_convert_child_iter_to_iter"));

		public bool ConvertChildIterToIter(out Gtk.TreeIter sort_iter, Gtk.TreeIter child_iter) {
			IntPtr native_sort_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			IntPtr native_child_iter = GLib.Marshaller.StructureToPtrAlloc (child_iter);
			bool raw_ret = gtk_tree_model_sort_convert_child_iter_to_iter(Handle, native_sort_iter, native_child_iter);
			bool ret = raw_ret;
			sort_iter = Gtk.TreeIter.New (native_sort_iter);
			Marshal.FreeHGlobal (native_sort_iter);
			Marshal.FreeHGlobal (native_child_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_sort_convert_child_path_to_path(IntPtr raw, IntPtr child_path);
		static d_gtk_tree_model_sort_convert_child_path_to_path gtk_tree_model_sort_convert_child_path_to_path = FuncLoader.LoadFunction<d_gtk_tree_model_sort_convert_child_path_to_path>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_convert_child_path_to_path"));

		public Gtk.TreePath ConvertChildPathToPath(Gtk.TreePath child_path) {
			IntPtr raw_ret = gtk_tree_model_sort_convert_child_path_to_path(Handle, child_path == null ? IntPtr.Zero : child_path.Handle);
			Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_sort_convert_iter_to_child_iter(IntPtr raw, IntPtr child_iter, IntPtr sorted_iter);
		static d_gtk_tree_model_sort_convert_iter_to_child_iter gtk_tree_model_sort_convert_iter_to_child_iter = FuncLoader.LoadFunction<d_gtk_tree_model_sort_convert_iter_to_child_iter>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_convert_iter_to_child_iter"));

		public Gtk.TreeIter ConvertIterToChildIter(Gtk.TreeIter sorted_iter) {
			Gtk.TreeIter child_iter;
			IntPtr native_child_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			IntPtr native_sorted_iter = GLib.Marshaller.StructureToPtrAlloc (sorted_iter);
			gtk_tree_model_sort_convert_iter_to_child_iter(Handle, native_child_iter, native_sorted_iter);
			child_iter = Gtk.TreeIter.New (native_child_iter);
			Marshal.FreeHGlobal (native_child_iter);
			Marshal.FreeHGlobal (native_sorted_iter);
			return child_iter;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_sort_convert_path_to_child_path(IntPtr raw, IntPtr sorted_path);
		static d_gtk_tree_model_sort_convert_path_to_child_path gtk_tree_model_sort_convert_path_to_child_path = FuncLoader.LoadFunction<d_gtk_tree_model_sort_convert_path_to_child_path>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_convert_path_to_child_path"));

		public Gtk.TreePath ConvertPathToChildPath(Gtk.TreePath sorted_path) {
			IntPtr raw_ret = gtk_tree_model_sort_convert_path_to_child_path(Handle, sorted_path == null ? IntPtr.Zero : sorted_path.Handle);
			Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_sort_get_type();
		static d_gtk_tree_model_sort_get_type gtk_tree_model_sort_get_type = FuncLoader.LoadFunction<d_gtk_tree_model_sort_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_tree_model_sort_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_sort_iter_is_valid(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_sort_iter_is_valid gtk_tree_model_sort_iter_is_valid = FuncLoader.LoadFunction<d_gtk_tree_model_sort_iter_is_valid>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_iter_is_valid"));

		public bool IterIsValid(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_tree_model_sort_iter_is_valid(Handle, native_iter);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_sort_reset_default_sort_func(IntPtr raw);
		static d_gtk_tree_model_sort_reset_default_sort_func gtk_tree_model_sort_reset_default_sort_func = FuncLoader.LoadFunction<d_gtk_tree_model_sort_reset_default_sort_func>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_sort_reset_default_sort_func"));

		public void ResetDefaultSortFunc() {
			gtk_tree_model_sort_reset_default_sort_func(Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_foreach(IntPtr raw, GtkSharp.TreeModelForeachFuncNative func, IntPtr user_data);
		static d_gtk_tree_model_foreach gtk_tree_model_foreach = FuncLoader.LoadFunction<d_gtk_tree_model_foreach>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_foreach"));

		public void Foreach(Gtk.TreeModelForeachFunc func) {
			GtkSharp.TreeModelForeachFuncWrapper func_wrapper = new GtkSharp.TreeModelForeachFuncWrapper (func);
			gtk_tree_model_foreach(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_get_column_type(IntPtr raw, int index_);
		static d_gtk_tree_model_get_column_type gtk_tree_model_get_column_type = FuncLoader.LoadFunction<d_gtk_tree_model_get_column_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_column_type"));

		public GLib.GType GetColumnType(int index_) {
			IntPtr raw_ret = gtk_tree_model_get_column_type(Handle, index_);
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_tree_model_get_flags(IntPtr raw);
		static d_gtk_tree_model_get_flags gtk_tree_model_get_flags = FuncLoader.LoadFunction<d_gtk_tree_model_get_flags>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_flags"));

		public Gtk.TreeModelFlags Flags { 
			get {
				int raw_ret = gtk_tree_model_get_flags(Handle);
				Gtk.TreeModelFlags ret = (Gtk.TreeModelFlags) raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_get_iter(IntPtr raw, IntPtr iter, IntPtr path);
		static d_gtk_tree_model_get_iter gtk_tree_model_get_iter = FuncLoader.LoadFunction<d_gtk_tree_model_get_iter>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_iter"));

		public bool GetIter(out Gtk.TreeIter iter, Gtk.TreePath path) {
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			bool raw_ret = gtk_tree_model_get_iter(Handle, native_iter, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_get_iter_first(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_get_iter_first gtk_tree_model_get_iter_first = FuncLoader.LoadFunction<d_gtk_tree_model_get_iter_first>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_iter_first"));

		public bool GetIterFirst(out Gtk.TreeIter iter) {
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			bool raw_ret = gtk_tree_model_get_iter_first(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_get_iter_from_string(IntPtr raw, IntPtr iter, IntPtr path_string);
		static d_gtk_tree_model_get_iter_from_string gtk_tree_model_get_iter_from_string = FuncLoader.LoadFunction<d_gtk_tree_model_get_iter_from_string>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_iter_from_string"));

		public bool GetIterFromString(out Gtk.TreeIter iter, string path_string) {
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			IntPtr native_path_string = GLib.Marshaller.StringToPtrGStrdup (path_string);
			bool raw_ret = gtk_tree_model_get_iter_from_string(Handle, native_iter, native_path_string);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			GLib.Marshaller.Free (native_path_string);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_tree_model_get_n_columns(IntPtr raw);
		static d_gtk_tree_model_get_n_columns gtk_tree_model_get_n_columns = FuncLoader.LoadFunction<d_gtk_tree_model_get_n_columns>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_n_columns"));

		public int NColumns { 
			get {
				int raw_ret = gtk_tree_model_get_n_columns(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_get_path(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_get_path gtk_tree_model_get_path = FuncLoader.LoadFunction<d_gtk_tree_model_get_path>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_path"));

		public Gtk.TreePath GetPath(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			IntPtr raw_ret = gtk_tree_model_get_path(Handle, native_iter);
			Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_tree_model_get_string_from_iter(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_get_string_from_iter gtk_tree_model_get_string_from_iter = FuncLoader.LoadFunction<d_gtk_tree_model_get_string_from_iter>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_string_from_iter"));

		public string GetStringFromIter(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			IntPtr raw_ret = gtk_tree_model_get_string_from_iter(Handle, native_iter);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_get_valist(IntPtr raw, IntPtr iter, IntPtr var_args);
		static d_gtk_tree_model_get_valist gtk_tree_model_get_valist = FuncLoader.LoadFunction<d_gtk_tree_model_get_valist>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_valist"));

		public void GetValist(Gtk.TreeIter iter, IntPtr var_args) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_get_valist(Handle, native_iter, var_args);
			Marshal.FreeHGlobal (native_iter);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_get_value(IntPtr raw, IntPtr iter, int column, IntPtr value);
		static d_gtk_tree_model_get_value gtk_tree_model_get_value = FuncLoader.LoadFunction<d_gtk_tree_model_get_value>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_get_value"));

		public void GetValue(Gtk.TreeIter iter, int column, ref GLib.Value value) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			gtk_tree_model_get_value(Handle, native_iter, column, native_value);
			Marshal.FreeHGlobal (native_iter);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_iter_children(IntPtr raw, IntPtr iter, IntPtr parent);
		static d_gtk_tree_model_iter_children gtk_tree_model_iter_children = FuncLoader.LoadFunction<d_gtk_tree_model_iter_children>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_children"));

		public bool IterChildren(out Gtk.TreeIter iter, Gtk.TreeIter parent) {
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			IntPtr native_parent = GLib.Marshaller.StructureToPtrAlloc (parent);
			bool raw_ret = gtk_tree_model_iter_children(Handle, native_iter, native_parent);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			Marshal.FreeHGlobal (native_parent);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_iter_has_child(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_iter_has_child gtk_tree_model_iter_has_child = FuncLoader.LoadFunction<d_gtk_tree_model_iter_has_child>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_has_child"));

		public bool IterHasChild(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_tree_model_iter_has_child(Handle, native_iter);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_tree_model_iter_n_children(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_iter_n_children gtk_tree_model_iter_n_children = FuncLoader.LoadFunction<d_gtk_tree_model_iter_n_children>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_n_children"));

		public int IterNChildren(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			int raw_ret = gtk_tree_model_iter_n_children(Handle, native_iter);
			int ret = raw_ret;
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_iter_next(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_iter_next gtk_tree_model_iter_next = FuncLoader.LoadFunction<d_gtk_tree_model_iter_next>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_next"));

		public bool IterNext(ref Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_tree_model_iter_next(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_iter_nth_child(IntPtr raw, IntPtr iter, IntPtr parent, int n);
		static d_gtk_tree_model_iter_nth_child gtk_tree_model_iter_nth_child = FuncLoader.LoadFunction<d_gtk_tree_model_iter_nth_child>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_nth_child"));

		public bool IterNthChild(out Gtk.TreeIter iter, Gtk.TreeIter parent, int n) {
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			IntPtr native_parent = GLib.Marshaller.StructureToPtrAlloc (parent);
			bool raw_ret = gtk_tree_model_iter_nth_child(Handle, native_iter, native_parent, n);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			Marshal.FreeHGlobal (native_parent);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_iter_parent(IntPtr raw, IntPtr iter, IntPtr child);
		static d_gtk_tree_model_iter_parent gtk_tree_model_iter_parent = FuncLoader.LoadFunction<d_gtk_tree_model_iter_parent>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_parent"));

		public bool IterParent(out Gtk.TreeIter iter, Gtk.TreeIter child) {
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			IntPtr native_child = GLib.Marshaller.StructureToPtrAlloc (child);
			bool raw_ret = gtk_tree_model_iter_parent(Handle, native_iter, native_child);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			Marshal.FreeHGlobal (native_child);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_model_iter_previous(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_iter_previous gtk_tree_model_iter_previous = FuncLoader.LoadFunction<d_gtk_tree_model_iter_previous>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_iter_previous"));

		public bool IterPrevious(ref Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool raw_ret = gtk_tree_model_iter_previous(Handle, native_iter);
			bool ret = raw_ret;
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_ref_node(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_ref_node gtk_tree_model_ref_node = FuncLoader.LoadFunction<d_gtk_tree_model_ref_node>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_ref_node"));

		public void RefNode(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_ref_node(Handle, native_iter);
			Marshal.FreeHGlobal (native_iter);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_row_changed(IntPtr raw, IntPtr path, IntPtr iter);
		static d_gtk_tree_model_row_changed gtk_tree_model_row_changed = FuncLoader.LoadFunction<d_gtk_tree_model_row_changed>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_row_changed"));

		public void EmitRowChanged(Gtk.TreePath path, Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_row_changed(Handle, path == null ? IntPtr.Zero : path.Handle, native_iter);
			Marshal.FreeHGlobal (native_iter);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_row_deleted(IntPtr raw, IntPtr path);
		static d_gtk_tree_model_row_deleted gtk_tree_model_row_deleted = FuncLoader.LoadFunction<d_gtk_tree_model_row_deleted>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_row_deleted"));

		public void EmitRowDeleted(Gtk.TreePath path) {
			gtk_tree_model_row_deleted(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_row_has_child_toggled(IntPtr raw, IntPtr path, IntPtr iter);
		static d_gtk_tree_model_row_has_child_toggled gtk_tree_model_row_has_child_toggled = FuncLoader.LoadFunction<d_gtk_tree_model_row_has_child_toggled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_row_has_child_toggled"));

		public void EmitRowHasChildToggled(Gtk.TreePath path, Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_row_has_child_toggled(Handle, path == null ? IntPtr.Zero : path.Handle, native_iter);
			Marshal.FreeHGlobal (native_iter);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_row_inserted(IntPtr raw, IntPtr path, IntPtr iter);
		static d_gtk_tree_model_row_inserted gtk_tree_model_row_inserted = FuncLoader.LoadFunction<d_gtk_tree_model_row_inserted>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_row_inserted"));

		public void EmitRowInserted(Gtk.TreePath path, Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_row_inserted(Handle, path == null ? IntPtr.Zero : path.Handle, native_iter);
			Marshal.FreeHGlobal (native_iter);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_rows_reordered(IntPtr raw, IntPtr path, IntPtr iter, int[] new_order);
		static d_gtk_tree_model_rows_reordered gtk_tree_model_rows_reordered = FuncLoader.LoadFunction<d_gtk_tree_model_rows_reordered>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_rows_reordered"));

		public void EmitRowsReordered(Gtk.TreePath path, Gtk.TreeIter iter, int[] new_order) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_rows_reordered(Handle, path == null ? IntPtr.Zero : path.Handle, native_iter, new_order);
			Marshal.FreeHGlobal (native_iter);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_rows_reordered_with_length(IntPtr raw, IntPtr path, IntPtr iter, out int new_order, int length);
		static d_gtk_tree_model_rows_reordered_with_length gtk_tree_model_rows_reordered_with_length = FuncLoader.LoadFunction<d_gtk_tree_model_rows_reordered_with_length>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_rows_reordered_with_length"));

		public int RowsReorderedWithLength(Gtk.TreePath path, Gtk.TreeIter iter, int length) {
			int new_order;
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_rows_reordered_with_length(Handle, path == null ? IntPtr.Zero : path.Handle, native_iter, out new_order, length);
			Marshal.FreeHGlobal (native_iter);
			return new_order;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_model_unref_node(IntPtr raw, IntPtr iter);
		static d_gtk_tree_model_unref_node gtk_tree_model_unref_node = FuncLoader.LoadFunction<d_gtk_tree_model_unref_node>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_model_unref_node"));

		public void UnrefNode(Gtk.TreeIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_model_unref_node(Handle, native_iter);
			Marshal.FreeHGlobal (native_iter);
		}

		[GLib.Signal("row-deleted")]
		public event Gtk.RowDeletedHandler RowDeleted {
			add {
				this.AddSignalHandler ("row-deleted", value, typeof (Gtk.RowDeletedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-deleted", value);
			}
		}

		[GLib.Signal("row-has-child-toggled")]
		public event Gtk.RowHasChildToggledHandler RowHasChildToggled {
			add {
				this.AddSignalHandler ("row-has-child-toggled", value, typeof (Gtk.RowHasChildToggledArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-has-child-toggled", value);
			}
		}

		[GLib.Signal("row-changed")]
		public event Gtk.RowChangedHandler RowChanged {
			add {
				this.AddSignalHandler ("row-changed", value, typeof (Gtk.RowChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-changed", value);
			}
		}

		[GLib.Signal("row-inserted")]
		public event Gtk.RowInsertedHandler RowInserted {
			add {
				this.AddSignalHandler ("row-inserted", value, typeof (Gtk.RowInsertedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-inserted", value);
			}
		}

		static RowChangedNativeDelegate RowChanged_cb_delegate;
		static RowChangedNativeDelegate RowChangedVMCallback {
			get {
				if (RowChanged_cb_delegate == null)
					RowChanged_cb_delegate = new RowChangedNativeDelegate (RowChanged_cb);
				return RowChanged_cb_delegate;
			}
		}

		static void OverrideRowChanged (GLib.GType gtype)
		{
			OverrideRowChanged (gtype, RowChangedVMCallback);
		}

		static void OverrideRowChanged (GLib.GType gtype, RowChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row-changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowChangedNativeDelegate (IntPtr inst, IntPtr path, IntPtr iter);

		static void RowChanged_cb (IntPtr inst, IntPtr path, IntPtr iter)
		{
			try {
				Gtk.TreeModelSort __obj = GLib.Object.GetObject (inst, false) as Gtk.TreeModelSort;
				__obj.OnRowChanged (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false), Gtk.TreeIter.New (iter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeModelSort), ConnectionMethod="OverrideRowChanged")]
		protected virtual void OnRowChanged (Gtk.TreePath path, Gtk.TreeIter iter)
		{
			InternalRowChanged (path, iter);
		}

		private void InternalRowChanged (Gtk.TreePath path, Gtk.TreeIter iter)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (path);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (iter);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static RowInsertedNativeDelegate RowInserted_cb_delegate;
		static RowInsertedNativeDelegate RowInsertedVMCallback {
			get {
				if (RowInserted_cb_delegate == null)
					RowInserted_cb_delegate = new RowInsertedNativeDelegate (RowInserted_cb);
				return RowInserted_cb_delegate;
			}
		}

		static void OverrideRowInserted (GLib.GType gtype)
		{
			OverrideRowInserted (gtype, RowInsertedVMCallback);
		}

		static void OverrideRowInserted (GLib.GType gtype, RowInsertedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row-inserted", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowInsertedNativeDelegate (IntPtr inst, IntPtr path, IntPtr iter);

		static void RowInserted_cb (IntPtr inst, IntPtr path, IntPtr iter)
		{
			try {
				Gtk.TreeModelSort __obj = GLib.Object.GetObject (inst, false) as Gtk.TreeModelSort;
				__obj.OnRowInserted (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false), Gtk.TreeIter.New (iter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeModelSort), ConnectionMethod="OverrideRowInserted")]
		protected virtual void OnRowInserted (Gtk.TreePath path, Gtk.TreeIter iter)
		{
			InternalRowInserted (path, iter);
		}

		private void InternalRowInserted (Gtk.TreePath path, Gtk.TreeIter iter)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (path);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (iter);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static RowHasChildToggledNativeDelegate RowHasChildToggled_cb_delegate;
		static RowHasChildToggledNativeDelegate RowHasChildToggledVMCallback {
			get {
				if (RowHasChildToggled_cb_delegate == null)
					RowHasChildToggled_cb_delegate = new RowHasChildToggledNativeDelegate (RowHasChildToggled_cb);
				return RowHasChildToggled_cb_delegate;
			}
		}

		static void OverrideRowHasChildToggled (GLib.GType gtype)
		{
			OverrideRowHasChildToggled (gtype, RowHasChildToggledVMCallback);
		}

		static void OverrideRowHasChildToggled (GLib.GType gtype, RowHasChildToggledNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row-has-child-toggled", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowHasChildToggledNativeDelegate (IntPtr inst, IntPtr path, IntPtr iter);

		static void RowHasChildToggled_cb (IntPtr inst, IntPtr path, IntPtr iter)
		{
			try {
				Gtk.TreeModelSort __obj = GLib.Object.GetObject (inst, false) as Gtk.TreeModelSort;
				__obj.OnRowHasChildToggled (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false), Gtk.TreeIter.New (iter));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeModelSort), ConnectionMethod="OverrideRowHasChildToggled")]
		protected virtual void OnRowHasChildToggled (Gtk.TreePath path, Gtk.TreeIter iter)
		{
			InternalRowHasChildToggled (path, iter);
		}

		private void InternalRowHasChildToggled (Gtk.TreePath path, Gtk.TreeIter iter)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (path);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (iter);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static RowDeletedNativeDelegate RowDeleted_cb_delegate;
		static RowDeletedNativeDelegate RowDeletedVMCallback {
			get {
				if (RowDeleted_cb_delegate == null)
					RowDeleted_cb_delegate = new RowDeletedNativeDelegate (RowDeleted_cb);
				return RowDeleted_cb_delegate;
			}
		}

		static void OverrideRowDeleted (GLib.GType gtype)
		{
			OverrideRowDeleted (gtype, RowDeletedVMCallback);
		}

		static void OverrideRowDeleted (GLib.GType gtype, RowDeletedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "row-deleted", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowDeletedNativeDelegate (IntPtr inst, IntPtr path);

		static void RowDeleted_cb (IntPtr inst, IntPtr path)
		{
			try {
				Gtk.TreeModelSort __obj = GLib.Object.GetObject (inst, false) as Gtk.TreeModelSort;
				__obj.OnRowDeleted (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeModelSort), ConnectionMethod="OverrideRowDeleted")]
		protected virtual void OnRowDeleted (Gtk.TreePath path)
		{
			InternalRowDeleted (path);
		}

		private void InternalRowDeleted (Gtk.TreePath path)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (path);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_sortable_get_sort_column_id(IntPtr raw, out int sort_column_id, out int order);
		static d_gtk_tree_sortable_get_sort_column_id gtk_tree_sortable_get_sort_column_id = FuncLoader.LoadFunction<d_gtk_tree_sortable_get_sort_column_id>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_sortable_get_sort_column_id"));

		public bool GetSortColumnId(out int sort_column_id, out Gtk.SortType order) {
			int native_order;
			bool raw_ret = gtk_tree_sortable_get_sort_column_id(Handle, out sort_column_id, out native_order);
			bool ret = raw_ret;
			order = (Gtk.SortType) native_order;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_sortable_has_default_sort_func(IntPtr raw);
		static d_gtk_tree_sortable_has_default_sort_func gtk_tree_sortable_has_default_sort_func = FuncLoader.LoadFunction<d_gtk_tree_sortable_has_default_sort_func>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_sortable_has_default_sort_func"));

		public bool HasDefaultSortFunc { 
			get {
				bool raw_ret = gtk_tree_sortable_has_default_sort_func(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_sortable_set_default_sort_func(IntPtr raw, GtkSharp.TreeIterCompareFuncNative sort_func, IntPtr user_data, GLib.DestroyNotify destroy);
		static d_gtk_tree_sortable_set_default_sort_func gtk_tree_sortable_set_default_sort_func = FuncLoader.LoadFunction<d_gtk_tree_sortable_set_default_sort_func>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_sortable_set_default_sort_func"));

		public Gtk.TreeIterCompareFunc DefaultSortFunc { 
			set {
				GtkSharp.TreeIterCompareFuncWrapper value_wrapper = new GtkSharp.TreeIterCompareFuncWrapper (value);
				IntPtr user_data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					user_data = IntPtr.Zero;
					destroy = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_sortable_set_default_sort_func(Handle, value_wrapper.NativeDelegate, user_data, destroy);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_sortable_set_sort_column_id(IntPtr raw, int sort_column_id, int order);
		static d_gtk_tree_sortable_set_sort_column_id gtk_tree_sortable_set_sort_column_id = FuncLoader.LoadFunction<d_gtk_tree_sortable_set_sort_column_id>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_sortable_set_sort_column_id"));

		public void SetSortColumnId(int sort_column_id, Gtk.SortType order) {
			gtk_tree_sortable_set_sort_column_id(Handle, sort_column_id, (int) order);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_sortable_set_sort_func(IntPtr raw, int sort_column_id, GtkSharp.TreeIterCompareFuncNative sort_func, IntPtr user_data, GLib.DestroyNotify destroy);
		static d_gtk_tree_sortable_set_sort_func gtk_tree_sortable_set_sort_func = FuncLoader.LoadFunction<d_gtk_tree_sortable_set_sort_func>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_sortable_set_sort_func"));

		public void SetSortFunc(int sort_column_id, Gtk.TreeIterCompareFunc sort_func) {
			GtkSharp.TreeIterCompareFuncWrapper sort_func_wrapper = new GtkSharp.TreeIterCompareFuncWrapper (sort_func);
			IntPtr user_data;
			GLib.DestroyNotify destroy;
			if (sort_func == null) {
				user_data = IntPtr.Zero;
				destroy = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (sort_func_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_tree_sortable_set_sort_func(Handle, sort_column_id, sort_func_wrapper.NativeDelegate, user_data, destroy);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_tree_sortable_sort_column_changed(IntPtr raw);
		static d_gtk_tree_sortable_sort_column_changed gtk_tree_sortable_sort_column_changed = FuncLoader.LoadFunction<d_gtk_tree_sortable_sort_column_changed>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_sortable_sort_column_changed"));

		public void ChangeSortColumn() {
			gtk_tree_sortable_sort_column_changed(Handle);
		}

		[GLib.Signal("sort-column-changed")]
		public event System.EventHandler SortColumnChanged {
			add {
				this.AddSignalHandler ("sort-column-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("sort-column-changed", value);
			}
		}

		static SortColumnChangedNativeDelegate SortColumnChanged_cb_delegate;
		static SortColumnChangedNativeDelegate SortColumnChangedVMCallback {
			get {
				if (SortColumnChanged_cb_delegate == null)
					SortColumnChanged_cb_delegate = new SortColumnChangedNativeDelegate (SortColumnChanged_cb);
				return SortColumnChanged_cb_delegate;
			}
		}

		static void OverrideSortColumnChanged (GLib.GType gtype)
		{
			OverrideSortColumnChanged (gtype, SortColumnChangedVMCallback);
		}

		static void OverrideSortColumnChanged (GLib.GType gtype, SortColumnChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sort-column-changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SortColumnChangedNativeDelegate (IntPtr inst);

		static void SortColumnChanged_cb (IntPtr inst)
		{
			try {
				Gtk.TreeModelSort __obj = GLib.Object.GetObject (inst, false) as Gtk.TreeModelSort;
				__obj.OnSortColumnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeModelSort), ConnectionMethod="OverrideSortColumnChanged")]
		protected virtual void OnSortColumnChanged ()
		{
			InternalSortColumnChanged ();
		}

		private void InternalSortColumnChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_drag_source_drag_data_delete(IntPtr raw, IntPtr path);
		static d_gtk_tree_drag_source_drag_data_delete gtk_tree_drag_source_drag_data_delete = FuncLoader.LoadFunction<d_gtk_tree_drag_source_drag_data_delete>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_drag_source_drag_data_delete"));

		public bool DragDataDelete(Gtk.TreePath path) {
			bool raw_ret = gtk_tree_drag_source_drag_data_delete(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_drag_source_drag_data_get(IntPtr raw, IntPtr path, IntPtr selection_data);
		static d_gtk_tree_drag_source_drag_data_get gtk_tree_drag_source_drag_data_get = FuncLoader.LoadFunction<d_gtk_tree_drag_source_drag_data_get>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_drag_source_drag_data_get"));

		public bool DragDataGet(Gtk.TreePath path, Gtk.SelectionData selection_data) {
			bool raw_ret = gtk_tree_drag_source_drag_data_get(Handle, path == null ? IntPtr.Zero : path.Handle, selection_data == null ? IntPtr.Zero : selection_data.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_tree_drag_source_row_draggable(IntPtr raw, IntPtr path);
		static d_gtk_tree_drag_source_row_draggable gtk_tree_drag_source_row_draggable = FuncLoader.LoadFunction<d_gtk_tree_drag_source_row_draggable>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_tree_drag_source_row_draggable"));

		public bool RowDraggable(Gtk.TreePath path) {
			bool raw_ret = gtk_tree_drag_source_row_draggable(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
