// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class CheckButton : Gtk.ToggleButton {

		public CheckButton (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_check_button_new();
		static d_gtk_check_button_new gtk_check_button_new = FuncLoader.LoadFunction<d_gtk_check_button_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_check_button_new"));

		public CheckButton () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CheckButton)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			owned = true;
			Raw = gtk_check_button_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_check_button_new_with_label(IntPtr label);
		static d_gtk_check_button_new_with_label gtk_check_button_new_with_label = FuncLoader.LoadFunction<d_gtk_check_button_new_with_label>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_check_button_new_with_label"));

		public static new CheckButton NewWithLabel(string label)
		{
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			CheckButton result = new CheckButton (gtk_check_button_new_with_label(native_label));
			GLib.Marshaller.Free (native_label);
			return result;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_check_button_new_with_mnemonic(IntPtr label);
		static d_gtk_check_button_new_with_mnemonic gtk_check_button_new_with_mnemonic = FuncLoader.LoadFunction<d_gtk_check_button_new_with_mnemonic>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_check_button_new_with_mnemonic"));

		public CheckButton (string label) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CheckButton)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("label");
				vals.Add (new GLib.Value (label));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			owned = true;
			Raw = gtk_check_button_new_with_mnemonic(native_label);
			GLib.Marshaller.Free (native_label);
		}

		[GLib.Property ("indicator-size")]
		public int IndicatorSize {
			get {
				GLib.Value val = GetProperty ("indicator-size");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("indicator-spacing")]
		public int IndicatorSpacing {
			get {
				GLib.Value val = GetProperty ("indicator-spacing");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		static DrawIndicatorNativeDelegate DrawIndicator_cb_delegate;
		static DrawIndicatorNativeDelegate DrawIndicatorVMCallback {
			get {
				if (DrawIndicator_cb_delegate == null)
					DrawIndicator_cb_delegate = new DrawIndicatorNativeDelegate (DrawIndicator_cb);
				return DrawIndicator_cb_delegate;
			}
		}

		static void OverrideDrawIndicator (GLib.GType gtype)
		{
			OverrideDrawIndicator (gtype, DrawIndicatorVMCallback);
		}

		static void OverrideDrawIndicator (GLib.GType gtype, DrawIndicatorNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("draw_indicator"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DrawIndicatorNativeDelegate (IntPtr inst, IntPtr cr);

		static void DrawIndicator_cb (IntPtr inst, IntPtr cr)
		{
			Cairo.Context mycr = null;

			try {
				CheckButton __obj = GLib.Object.GetObject (inst, false) as CheckButton;
				mycr = new Cairo.Context (cr, false);
				__obj.OnDrawIndicator (mycr);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CheckButton), ConnectionMethod="OverrideDrawIndicator")]
		protected virtual void OnDrawIndicator (Cairo.Context cr)
		{
			InternalDrawIndicator (cr);
		}

		private void InternalDrawIndicator (Cairo.Context cr)
		{
			DrawIndicatorNativeDelegate unmanaged = class_abi.BaseOverride<DrawIndicatorNativeDelegate>(this.LookupGType(), "draw_indicator");
			if (unmanaged == null) return;

			unmanaged (this.Handle, cr == null ? IntPtr.Zero : cr.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("draw_indicator"
							, Gtk.ToggleButton.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // draw_indicator
							, null
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "draw_indicator"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_check_button_get_type();
		static d_gtk_check_button_get_type gtk_check_button_get_type = FuncLoader.LoadFunction<d_gtk_check_button_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_check_button_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_check_button_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gtk.ToggleButton.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
