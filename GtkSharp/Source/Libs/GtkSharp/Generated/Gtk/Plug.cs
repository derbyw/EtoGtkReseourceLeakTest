// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class Plug : Gtk.Window {

		public Plug (IntPtr raw) : base(raw) {}

		protected Plug() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_plug_get_embedded(IntPtr raw);
		static d_gtk_plug_get_embedded gtk_plug_get_embedded = FuncLoader.LoadFunction<d_gtk_plug_get_embedded>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_plug_get_embedded"));

		[GLib.Property ("embedded")]
		public bool IsEmbedded {
			get  {
				bool raw_ret = gtk_plug_get_embedded(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_plug_get_socket_window(IntPtr raw);
		static d_gtk_plug_get_socket_window gtk_plug_get_socket_window = FuncLoader.LoadFunction<d_gtk_plug_get_socket_window>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_plug_get_socket_window"));

		[GLib.Property ("socket-window")]
		public Gdk.Window SocketWindow {
			get  {
				IntPtr raw_ret = gtk_plug_get_socket_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[GLib.Signal("embedded")]
		public event System.EventHandler Embedded {
			add {
				this.AddSignalHandler ("embedded", value);
			}
			remove {
				this.RemoveSignalHandler ("embedded", value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_plug_construct(IntPtr raw, UIntPtr socket_id);
		static d_gtk_plug_construct gtk_plug_construct = FuncLoader.LoadFunction<d_gtk_plug_construct>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_plug_construct"));

		public void Construct(ulong socket_id) {
			gtk_plug_construct(Handle, new UIntPtr (socket_id));
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_plug_construct_for_display(IntPtr raw, IntPtr display, UIntPtr socket_id);
		static d_gtk_plug_construct_for_display gtk_plug_construct_for_display = FuncLoader.LoadFunction<d_gtk_plug_construct_for_display>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_plug_construct_for_display"));

		public void ConstructForDisplay(Gdk.Display display, ulong socket_id) {
			gtk_plug_construct_for_display(Handle, display == null ? IntPtr.Zero : display.Handle, new UIntPtr (socket_id));
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate UIntPtr d_gtk_plug_get_id(IntPtr raw);
		static d_gtk_plug_get_id gtk_plug_get_id = FuncLoader.LoadFunction<d_gtk_plug_get_id>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_plug_get_id"));

		public ulong Id { 
			get {
				UIntPtr raw_ret = gtk_plug_get_id(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_plug_get_type();
		static d_gtk_plug_get_type gtk_plug_get_type = FuncLoader.LoadFunction<d_gtk_plug_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_plug_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_plug_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
