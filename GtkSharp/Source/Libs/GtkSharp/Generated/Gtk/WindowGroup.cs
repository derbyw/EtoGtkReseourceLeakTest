// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class WindowGroup : GLib.Object {

		public WindowGroup (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_window_group_new();
		static d_gtk_window_group_new gtk_window_group_new = FuncLoader.LoadFunction<d_gtk_window_group_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_new"));

		public WindowGroup () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (WindowGroup)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			owned = true;
			Raw = gtk_window_group_new();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gtk_reserved1"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, null
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_window_group_add_window(IntPtr raw, IntPtr window);
		static d_gtk_window_group_add_window gtk_window_group_add_window = FuncLoader.LoadFunction<d_gtk_window_group_add_window>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_add_window"));

		public void AddWindow(Gtk.Window window) {
			gtk_window_group_add_window(Handle, window == null ? IntPtr.Zero : window.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_window_group_get_current_device_grab(IntPtr raw, IntPtr device);
		static d_gtk_window_group_get_current_device_grab gtk_window_group_get_current_device_grab = FuncLoader.LoadFunction<d_gtk_window_group_get_current_device_grab>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_get_current_device_grab"));

		public Gtk.Widget GetCurrentDeviceGrab(Gdk.Device device) {
			IntPtr raw_ret = gtk_window_group_get_current_device_grab(Handle, device == null ? IntPtr.Zero : device.Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_window_group_get_current_grab(IntPtr raw);
		static d_gtk_window_group_get_current_grab gtk_window_group_get_current_grab = FuncLoader.LoadFunction<d_gtk_window_group_get_current_grab>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_get_current_grab"));

		public Gtk.Widget CurrentGrab { 
			get {
				IntPtr raw_ret = gtk_window_group_get_current_grab(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_window_group_get_type();
		static d_gtk_window_group_get_type gtk_window_group_get_type = FuncLoader.LoadFunction<d_gtk_window_group_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_window_group_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_window_group_list_windows(IntPtr raw);
		static d_gtk_window_group_list_windows gtk_window_group_list_windows = FuncLoader.LoadFunction<d_gtk_window_group_list_windows>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_list_windows"));

		public Gtk.Window[] ListWindows() {
			IntPtr raw_ret = gtk_window_group_list_windows(Handle);
			Gtk.Window[] ret = (Gtk.Window[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Gtk.Window));
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_window_group_remove_window(IntPtr raw, IntPtr window);
		static d_gtk_window_group_remove_window gtk_window_group_remove_window = FuncLoader.LoadFunction<d_gtk_window_group_remove_window>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_window_group_remove_window"));

		public void RemoveWindow(Gtk.Window window) {
			gtk_window_group_remove_window(Handle, window == null ? IntPtr.Zero : window.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
