// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class FlowBoxChild : Gtk.Bin {

		public FlowBoxChild (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_flow_box_child_new();
		static d_gtk_flow_box_child_new gtk_flow_box_child_new = FuncLoader.LoadFunction<d_gtk_flow_box_child_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_flow_box_child_new"));

		public FlowBoxChild () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FlowBoxChild)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			owned = true;
			Raw = gtk_flow_box_child_new();
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activate {
			add {
				this.AddSignalHandler ("activate", value);
			}
			remove {
				this.RemoveSignalHandler ("activate", value);
			}
		}

		static ActivateNativeDelegate Activate_cb_delegate;
		static ActivateNativeDelegate ActivateVMCallback {
			get {
				if (Activate_cb_delegate == null)
					Activate_cb_delegate = new ActivateNativeDelegate (Activate_cb);
				return Activate_cb_delegate;
			}
		}

		static void OverrideActivate (GLib.GType gtype)
		{
			OverrideActivate (gtype, ActivateVMCallback);
		}

		static void OverrideActivate (GLib.GType gtype, ActivateNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("activate"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateNativeDelegate (IntPtr inst);

		static void Activate_cb (IntPtr inst)
		{
			try {
				FlowBoxChild __obj = GLib.Object.GetObject (inst, false) as FlowBoxChild;
				__obj.OnActivate ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.FlowBoxChild), ConnectionMethod="OverrideActivate")]
		protected virtual void OnActivate ()
		{
			InternalActivate ();
		}

		private void InternalActivate ()
		{
			ActivateNativeDelegate unmanaged = class_abi.BaseOverride<ActivateNativeDelegate>(this.LookupGType(), "activate");
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("activate"
							, Gtk.Bin.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // activate
							, null
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "activate"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_flow_box_child_changed(IntPtr raw);
		static d_gtk_flow_box_child_changed gtk_flow_box_child_changed = FuncLoader.LoadFunction<d_gtk_flow_box_child_changed>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_flow_box_child_changed"));

		public void Changed() {
			gtk_flow_box_child_changed(Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_flow_box_child_get_index(IntPtr raw);
		static d_gtk_flow_box_child_get_index gtk_flow_box_child_get_index = FuncLoader.LoadFunction<d_gtk_flow_box_child_get_index>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_flow_box_child_get_index"));

		public int Index { 
			get {
				int raw_ret = gtk_flow_box_child_get_index(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_flow_box_child_get_type();
		static d_gtk_flow_box_child_get_type gtk_flow_box_child_get_type = FuncLoader.LoadFunction<d_gtk_flow_box_child_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_flow_box_child_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_flow_box_child_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_flow_box_child_is_selected(IntPtr raw);
		static d_gtk_flow_box_child_is_selected gtk_flow_box_child_is_selected = FuncLoader.LoadFunction<d_gtk_flow_box_child_is_selected>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_flow_box_child_is_selected"));

		public bool IsSelected { 
			get {
				bool raw_ret = gtk_flow_box_child_is_selected(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gtk.Bin.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
