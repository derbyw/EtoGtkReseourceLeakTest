// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class MountOperation : GLib.MountOperation {

		public MountOperation (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_mount_operation_new(IntPtr parent);
		static d_gtk_mount_operation_new gtk_mount_operation_new = FuncLoader.LoadFunction<d_gtk_mount_operation_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_new"));

		public MountOperation (Gtk.Window parent) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MountOperation)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (parent != null) {
					names.Add ("parent");
					vals.Add (new GLib.Value (parent));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = gtk_mount_operation_new(parent == null ? IntPtr.Zero : parent.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_mount_operation_get_parent(IntPtr raw);
		static d_gtk_mount_operation_get_parent gtk_mount_operation_get_parent = FuncLoader.LoadFunction<d_gtk_mount_operation_get_parent>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_get_parent"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_mount_operation_set_parent(IntPtr raw, IntPtr parent);
		static d_gtk_mount_operation_set_parent gtk_mount_operation_set_parent = FuncLoader.LoadFunction<d_gtk_mount_operation_set_parent>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_set_parent"));

		[GLib.Property ("parent")]
		public Gtk.Window Parent {
			get  {
				IntPtr raw_ret = gtk_mount_operation_get_parent(Handle);
				Gtk.Window ret = GLib.Object.GetObject(raw_ret) as Gtk.Window;
				return ret;
			}
			set  {
				gtk_mount_operation_set_parent(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_mount_operation_is_showing(IntPtr raw);
		static d_gtk_mount_operation_is_showing gtk_mount_operation_is_showing = FuncLoader.LoadFunction<d_gtk_mount_operation_is_showing>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_is_showing"));

		[GLib.Property ("is-showing")]
		public bool IsShowing {
			get  {
				bool raw_ret = gtk_mount_operation_is_showing(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_mount_operation_get_screen(IntPtr raw);
		static d_gtk_mount_operation_get_screen gtk_mount_operation_get_screen = FuncLoader.LoadFunction<d_gtk_mount_operation_get_screen>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_get_screen"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_mount_operation_set_screen(IntPtr raw, IntPtr screen);
		static d_gtk_mount_operation_set_screen gtk_mount_operation_set_screen = FuncLoader.LoadFunction<d_gtk_mount_operation_set_screen>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_set_screen"));

		[GLib.Property ("screen")]
		public Gdk.Screen Screen {
			get  {
				IntPtr raw_ret = gtk_mount_operation_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
			set  {
				gtk_mount_operation_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gtk_reserved1"
							, GLib.MountOperation.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, null
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_mount_operation_get_type();
		static d_gtk_mount_operation_get_type gtk_mount_operation_get_type = FuncLoader.LoadFunction<d_gtk_mount_operation_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_mount_operation_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_mount_operation_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.MountOperation.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
