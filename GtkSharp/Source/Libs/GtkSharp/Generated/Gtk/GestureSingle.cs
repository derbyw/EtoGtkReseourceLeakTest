// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class GestureSingle : Gtk.Gesture {

		public GestureSingle (IntPtr raw) : base(raw) {}

		protected GestureSingle() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_gesture_single_get_touch_only(IntPtr raw);
		static d_gtk_gesture_single_get_touch_only gtk_gesture_single_get_touch_only = FuncLoader.LoadFunction<d_gtk_gesture_single_get_touch_only>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_get_touch_only"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_gesture_single_set_touch_only(IntPtr raw, bool touch_only);
		static d_gtk_gesture_single_set_touch_only gtk_gesture_single_set_touch_only = FuncLoader.LoadFunction<d_gtk_gesture_single_set_touch_only>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_set_touch_only"));

		[GLib.Property ("touch-only")]
		public bool TouchOnly {
			get  {
				bool raw_ret = gtk_gesture_single_get_touch_only(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_gesture_single_set_touch_only(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_gesture_single_get_exclusive(IntPtr raw);
		static d_gtk_gesture_single_get_exclusive gtk_gesture_single_get_exclusive = FuncLoader.LoadFunction<d_gtk_gesture_single_get_exclusive>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_get_exclusive"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_gesture_single_set_exclusive(IntPtr raw, bool exclusive);
		static d_gtk_gesture_single_set_exclusive gtk_gesture_single_set_exclusive = FuncLoader.LoadFunction<d_gtk_gesture_single_set_exclusive>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_set_exclusive"));

		[GLib.Property ("exclusive")]
		public bool Exclusive {
			get  {
				bool raw_ret = gtk_gesture_single_get_exclusive(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_gesture_single_set_exclusive(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_gtk_gesture_single_get_button(IntPtr raw);
		static d_gtk_gesture_single_get_button gtk_gesture_single_get_button = FuncLoader.LoadFunction<d_gtk_gesture_single_get_button>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_get_button"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_gesture_single_set_button(IntPtr raw, uint button);
		static d_gtk_gesture_single_set_button gtk_gesture_single_set_button = FuncLoader.LoadFunction<d_gtk_gesture_single_set_button>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_set_button"));

		[GLib.Property ("button")]
		public uint Button {
			get  {
				uint raw_ret = gtk_gesture_single_get_button(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_gesture_single_set_button(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_gtk_gesture_single_get_current_button(IntPtr raw);
		static d_gtk_gesture_single_get_current_button gtk_gesture_single_get_current_button = FuncLoader.LoadFunction<d_gtk_gesture_single_get_current_button>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_get_current_button"));

		public uint CurrentButton { 
			get {
				uint raw_ret = gtk_gesture_single_get_current_button(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_gesture_single_get_current_sequence(IntPtr raw);
		static d_gtk_gesture_single_get_current_sequence gtk_gesture_single_get_current_sequence = FuncLoader.LoadFunction<d_gtk_gesture_single_get_current_sequence>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_get_current_sequence"));

		public Gdk.EventSequence CurrentSequence { 
			get {
				IntPtr raw_ret = gtk_gesture_single_get_current_sequence(Handle);
				Gdk.EventSequence ret = raw_ret == IntPtr.Zero ? null : (Gdk.EventSequence) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.EventSequence), false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_gesture_single_get_type();
		static d_gtk_gesture_single_get_type gtk_gesture_single_get_type = FuncLoader.LoadFunction<d_gtk_gesture_single_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_gesture_single_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_gesture_single_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
