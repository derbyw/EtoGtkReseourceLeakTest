// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class AccelLabel : Gtk.Label {

		public AccelLabel (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_accel_label_new(IntPtr str1ng);
		static d_gtk_accel_label_new gtk_accel_label_new = FuncLoader.LoadFunction<d_gtk_accel_label_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_new"));

		public AccelLabel (string str1ng) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AccelLabel)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("label");
				vals.Add (new GLib.Value (str1ng));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			owned = true;
			Raw = gtk_accel_label_new(native_str1ng);
			GLib.Marshaller.Free (native_str1ng);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_accel_label_set_accel_closure(IntPtr raw, IntPtr accel_closure);
		static d_gtk_accel_label_set_accel_closure gtk_accel_label_set_accel_closure = FuncLoader.LoadFunction<d_gtk_accel_label_set_accel_closure>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_set_accel_closure"));

		[GLib.Property ("accel-closure")]
		public IntPtr AccelClosure {
			get {
				GLib.Value val = GetProperty ("accel-closure");
				IntPtr ret = (IntPtr) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gtk_accel_label_set_accel_closure(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_accel_label_get_accel_widget(IntPtr raw);
		static d_gtk_accel_label_get_accel_widget gtk_accel_label_get_accel_widget = FuncLoader.LoadFunction<d_gtk_accel_label_get_accel_widget>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_get_accel_widget"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_accel_label_set_accel_widget(IntPtr raw, IntPtr accel_widget);
		static d_gtk_accel_label_set_accel_widget gtk_accel_label_set_accel_widget = FuncLoader.LoadFunction<d_gtk_accel_label_set_accel_widget>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_set_accel_widget"));

		[GLib.Property ("accel-widget")]
		public Gtk.Widget AccelWidget {
			get  {
				IntPtr raw_ret = gtk_accel_label_get_accel_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				gtk_accel_label_set_accel_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("signal_quote1"
							, Gtk.Label.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // signal_quote1
							, null
							, "signal_quote2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("signal_quote2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // signal_quote2
							, "signal_quote1"
							, "mod_name_shift"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("mod_name_shift"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // mod_name_shift
							, "signal_quote2"
							, "mod_name_control"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("mod_name_control"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // mod_name_control
							, "mod_name_shift"
							, "mod_name_alt"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("mod_name_alt"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // mod_name_alt
							, "mod_name_control"
							, "mod_separator"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("mod_separator"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // mod_separator
							, "mod_name_alt"
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "mod_separator"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_accel_label_get_accel(IntPtr raw, out uint accelerator_key, out int accelerator_mods);
		static d_gtk_accel_label_get_accel gtk_accel_label_get_accel = FuncLoader.LoadFunction<d_gtk_accel_label_get_accel>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_get_accel"));

		public void GetAccel(out uint accelerator_key, out Gdk.ModifierType accelerator_mods) {
			int native_accelerator_mods;
			gtk_accel_label_get_accel(Handle, out accelerator_key, out native_accelerator_mods);
			accelerator_mods = (Gdk.ModifierType) native_accelerator_mods;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_gtk_accel_label_get_accel_width(IntPtr raw);
		static d_gtk_accel_label_get_accel_width gtk_accel_label_get_accel_width = FuncLoader.LoadFunction<d_gtk_accel_label_get_accel_width>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_get_accel_width"));

		public uint AccelWidth { 
			get {
				uint raw_ret = gtk_accel_label_get_accel_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_accel_label_get_type();
		static d_gtk_accel_label_get_type gtk_accel_label_get_type = FuncLoader.LoadFunction<d_gtk_accel_label_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_accel_label_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_accel_label_refetch(IntPtr raw);
		static d_gtk_accel_label_refetch gtk_accel_label_refetch = FuncLoader.LoadFunction<d_gtk_accel_label_refetch>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_refetch"));

		public bool Refetch() {
			bool raw_ret = gtk_accel_label_refetch(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_accel_label_set_accel(IntPtr raw, uint accelerator_key, int accelerator_mods);
		static d_gtk_accel_label_set_accel gtk_accel_label_set_accel = FuncLoader.LoadFunction<d_gtk_accel_label_set_accel>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gtk), "gtk_accel_label_set_accel"));

		public void SetAccel(uint accelerator_key, Gdk.ModifierType accelerator_mods) {
			gtk_accel_label_set_accel(Handle, accelerator_key, (int) accelerator_mods);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gtk.Label.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
