// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class MountAdapter : GLib.GInterfaceAdapter, GLib.IMount {

		GLib.Object implementor;

		public MountAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_type();
		static d_g_mount_get_type g_mount_get_type = FuncLoader.LoadFunction<d_g_mount_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_type"));

		private static GLib.GType _gtype = new GLib.GType (g_mount_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static IMount GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static IMount GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj as IMount == null)
				return new MountAdapter (obj.Handle);
			else
				return obj as IMount;
		}

		[GLib.Signal("unmounted")]
		public event System.EventHandler Unmounted {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("unmounted", value);
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("unmounted", value);
			}
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("changed", value);
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("changed", value);
			}
		}

		[GLib.Signal("pre-unmount")]
		public event System.EventHandler PreUnmount {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("pre-unmount", value);
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("pre-unmount", value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_mount_can_eject(IntPtr raw);
		static d_g_mount_can_eject g_mount_can_eject = FuncLoader.LoadFunction<d_g_mount_can_eject>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_can_eject"));

		public bool CanEject() {
			bool raw_ret = g_mount_can_eject(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_mount_can_unmount(IntPtr raw);
		static d_g_mount_can_unmount g_mount_can_unmount = FuncLoader.LoadFunction<d_g_mount_can_unmount>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_can_unmount"));

		public bool CanUnmount { 
			get {
				bool raw_ret = g_mount_can_unmount(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_mount_eject_with_operation(IntPtr raw, int flags, IntPtr mount_operation, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_g_mount_eject_with_operation g_mount_eject_with_operation = FuncLoader.LoadFunction<d_g_mount_eject_with_operation>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_eject_with_operation"));

		public void EjectWithOperation(GLib.MountUnmountFlags flags, GLib.MountOperation mount_operation, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_mount_eject_with_operation(Handle, (int) flags, mount_operation == null ? IntPtr.Zero : mount_operation.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_mount_eject_with_operation_finish(IntPtr raw, IntPtr result, out IntPtr error);
		static d_g_mount_eject_with_operation_finish g_mount_eject_with_operation_finish = FuncLoader.LoadFunction<d_g_mount_eject_with_operation_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_eject_with_operation_finish"));

		public bool EjectWithOperationFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_mount_eject_with_operation_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_default_location(IntPtr raw);
		static d_g_mount_get_default_location g_mount_get_default_location = FuncLoader.LoadFunction<d_g_mount_get_default_location>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_default_location"));

		public GLib.IFile DefaultLocation { 
			get {
				IntPtr raw_ret = g_mount_get_default_location(Handle);
				GLib.IFile ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_drive(IntPtr raw);
		static d_g_mount_get_drive g_mount_get_drive = FuncLoader.LoadFunction<d_g_mount_get_drive>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_drive"));

		public GLib.IDrive Drive { 
			get {
				IntPtr raw_ret = g_mount_get_drive(Handle);
				GLib.IDrive ret = GLib.DriveAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_icon(IntPtr raw);
		static d_g_mount_get_icon g_mount_get_icon = FuncLoader.LoadFunction<d_g_mount_get_icon>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_icon"));

		public GLib.IIcon Icon { 
			get {
				IntPtr raw_ret = g_mount_get_icon(Handle);
				GLib.IIcon ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_name(IntPtr raw);
		static d_g_mount_get_name g_mount_get_name = FuncLoader.LoadFunction<d_g_mount_get_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_name"));

		public string Name { 
			get {
				IntPtr raw_ret = g_mount_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_root(IntPtr raw);
		static d_g_mount_get_root g_mount_get_root = FuncLoader.LoadFunction<d_g_mount_get_root>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_root"));

		public GLib.IFile Root { 
			get {
				IntPtr raw_ret = g_mount_get_root(Handle);
				GLib.IFile ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_sort_key(IntPtr raw);
		static d_g_mount_get_sort_key g_mount_get_sort_key = FuncLoader.LoadFunction<d_g_mount_get_sort_key>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_sort_key"));

		public string SortKey { 
			get {
				IntPtr raw_ret = g_mount_get_sort_key(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_symbolic_icon(IntPtr raw);
		static d_g_mount_get_symbolic_icon g_mount_get_symbolic_icon = FuncLoader.LoadFunction<d_g_mount_get_symbolic_icon>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_symbolic_icon"));

		public GLib.IIcon SymbolicIcon { 
			get {
				IntPtr raw_ret = g_mount_get_symbolic_icon(Handle);
				GLib.IIcon ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_uuid(IntPtr raw);
		static d_g_mount_get_uuid g_mount_get_uuid = FuncLoader.LoadFunction<d_g_mount_get_uuid>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_uuid"));

		public string Uuid { 
			get {
				IntPtr raw_ret = g_mount_get_uuid(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_get_volume(IntPtr raw);
		static d_g_mount_get_volume g_mount_get_volume = FuncLoader.LoadFunction<d_g_mount_get_volume>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_get_volume"));

		public GLib.IVolume Volume { 
			get {
				IntPtr raw_ret = g_mount_get_volume(Handle);
				GLib.IVolume ret = GLib.VolumeAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_mount_guess_content_type(IntPtr raw, bool force_rescan, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_g_mount_guess_content_type g_mount_guess_content_type = FuncLoader.LoadFunction<d_g_mount_guess_content_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_guess_content_type"));

		public void GuessContentType(bool force_rescan, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_mount_guess_content_type(Handle, force_rescan, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_guess_content_type_finish(IntPtr raw, IntPtr result, out IntPtr error);
		static d_g_mount_guess_content_type_finish g_mount_guess_content_type_finish = FuncLoader.LoadFunction<d_g_mount_guess_content_type_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_guess_content_type_finish"));

		public string[] GuessContentTypeFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_mount_guess_content_type_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_mount_guess_content_type_sync(IntPtr raw, bool force_rescan, IntPtr cancellable, out IntPtr error);
		static d_g_mount_guess_content_type_sync g_mount_guess_content_type_sync = FuncLoader.LoadFunction<d_g_mount_guess_content_type_sync>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_guess_content_type_sync"));

		public string[] GuessContentTypeSync(bool force_rescan, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_mount_guess_content_type_sync(Handle, force_rescan, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_mount_is_shadowed(IntPtr raw);
		static d_g_mount_is_shadowed g_mount_is_shadowed = FuncLoader.LoadFunction<d_g_mount_is_shadowed>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_is_shadowed"));

		public bool IsShadowed { 
			get {
				bool raw_ret = g_mount_is_shadowed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_mount_remount(IntPtr raw, int flags, IntPtr mount_operation, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_g_mount_remount g_mount_remount = FuncLoader.LoadFunction<d_g_mount_remount>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_remount"));

		public void Remount(GLib.MountMountFlags flags, GLib.MountOperation mount_operation, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_mount_remount(Handle, (int) flags, mount_operation == null ? IntPtr.Zero : mount_operation.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_mount_remount_finish(IntPtr raw, IntPtr result, out IntPtr error);
		static d_g_mount_remount_finish g_mount_remount_finish = FuncLoader.LoadFunction<d_g_mount_remount_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_remount_finish"));

		public bool RemountFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_mount_remount_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_mount_shadow(IntPtr raw);
		static d_g_mount_shadow g_mount_shadow = FuncLoader.LoadFunction<d_g_mount_shadow>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_shadow"));

		public void Shadow() {
			g_mount_shadow(Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_mount_unmount_with_operation(IntPtr raw, int flags, IntPtr mount_operation, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_g_mount_unmount_with_operation g_mount_unmount_with_operation = FuncLoader.LoadFunction<d_g_mount_unmount_with_operation>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_unmount_with_operation"));

		public void UnmountWithOperation(GLib.MountUnmountFlags flags, GLib.MountOperation mount_operation, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_mount_unmount_with_operation(Handle, (int) flags, mount_operation == null ? IntPtr.Zero : mount_operation.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_mount_unmount_with_operation_finish(IntPtr raw, IntPtr result, out IntPtr error);
		static d_g_mount_unmount_with_operation_finish g_mount_unmount_with_operation_finish = FuncLoader.LoadFunction<d_g_mount_unmount_with_operation_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_unmount_with_operation_finish"));

		public bool UnmountWithOperationFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_mount_unmount_with_operation_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_mount_unshadow(IntPtr raw);
		static d_g_mount_unshadow g_mount_unshadow = FuncLoader.LoadFunction<d_g_mount_unshadow>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_mount_unshadow"));

		public void Unshadow() {
			g_mount_unshadow(Handle);
		}

#endregion
	}
}
