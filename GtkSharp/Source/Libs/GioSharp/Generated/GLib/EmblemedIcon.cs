// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class EmblemedIcon : GLib.Object, GLib.IIcon {

		public EmblemedIcon (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_emblemed_icon_new(IntPtr icon, IntPtr emblem);
		static d_g_emblemed_icon_new g_emblemed_icon_new = FuncLoader.LoadFunction<d_g_emblemed_icon_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_emblemed_icon_new"));

		public EmblemedIcon (GLib.IIcon icon, GLib.Emblem emblem) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (EmblemedIcon)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = g_emblemed_icon_new(icon == null ? IntPtr.Zero : ((icon is GLib.Object) ? (icon as GLib.Object).Handle : (icon as GLib.IconAdapter).Handle), emblem == null ? IntPtr.Zero : emblem.Handle);
		}

		[GLib.Property ("gicon")]
		public GLib.IIcon Gicon {
			get {
				GLib.Value val = GetProperty ("gicon");
				GLib.IIcon ret = GLib.IconAdapter.GetObject ((GLib.Object) val);
				val.Dispose ();
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_emblemed_icon_add_emblem(IntPtr raw, IntPtr emblem);
		static d_g_emblemed_icon_add_emblem g_emblemed_icon_add_emblem = FuncLoader.LoadFunction<d_g_emblemed_icon_add_emblem>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_emblemed_icon_add_emblem"));

		public void AddEmblem(GLib.Emblem emblem) {
			g_emblemed_icon_add_emblem(Handle, emblem == null ? IntPtr.Zero : emblem.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_g_emblemed_icon_clear_emblems(IntPtr raw);
		static d_g_emblemed_icon_clear_emblems g_emblemed_icon_clear_emblems = FuncLoader.LoadFunction<d_g_emblemed_icon_clear_emblems>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_emblemed_icon_clear_emblems"));

		public void ClearEmblems() {
			g_emblemed_icon_clear_emblems(Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_emblemed_icon_get_emblems(IntPtr raw);
		static d_g_emblemed_icon_get_emblems g_emblemed_icon_get_emblems = FuncLoader.LoadFunction<d_g_emblemed_icon_get_emblems>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_emblemed_icon_get_emblems"));

		public GLib.Emblem[] Emblems { 
			get {
				IntPtr raw_ret = g_emblemed_icon_get_emblems(Handle);
				GLib.Emblem[] ret = (GLib.Emblem[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(GLib.Emblem));
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_emblemed_icon_get_icon(IntPtr raw);
		static d_g_emblemed_icon_get_icon g_emblemed_icon_get_icon = FuncLoader.LoadFunction<d_g_emblemed_icon_get_icon>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_emblemed_icon_get_icon"));

		public GLib.IIcon Icon { 
			get {
				IntPtr raw_ret = g_emblemed_icon_get_icon(Handle);
				GLib.IIcon ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_emblemed_icon_get_type();
		static d_g_emblemed_icon_get_type g_emblemed_icon_get_type = FuncLoader.LoadFunction<d_g_emblemed_icon_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_emblemed_icon_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_emblemed_icon_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_g_icon_equal(IntPtr raw, IntPtr icon2);
		static d_g_icon_equal g_icon_equal = FuncLoader.LoadFunction<d_g_icon_equal>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_icon_equal"));

		public bool Equal(GLib.IIcon icon2) {
			bool raw_ret = g_icon_equal(Handle, icon2 == null ? IntPtr.Zero : ((icon2 is GLib.Object) ? (icon2 as GLib.Object).Handle : (icon2 as GLib.IconAdapter).Handle));
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_icon_serialize(IntPtr raw);
		static d_g_icon_serialize g_icon_serialize = FuncLoader.LoadFunction<d_g_icon_serialize>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_icon_serialize"));

		public GLib.Variant Serialize() {
			IntPtr raw_ret = g_icon_serialize(Handle);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_icon_to_string(IntPtr raw);
		static d_g_icon_to_string g_icon_to_string = FuncLoader.LoadFunction<d_g_icon_to_string>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_icon_to_string"));

		public override string ToString() {
			IntPtr raw_ret = g_icon_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
