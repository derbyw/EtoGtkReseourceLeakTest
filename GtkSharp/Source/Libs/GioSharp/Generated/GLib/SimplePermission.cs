// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class SimplePermission : GLib.Permission {

		public SimplePermission (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_simple_permission_new(bool allowed);
		static d_g_simple_permission_new g_simple_permission_new = FuncLoader.LoadFunction<d_g_simple_permission_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_simple_permission_new"));

		public SimplePermission (bool allowed) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SimplePermission)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("allowed");
				vals.Add (new GLib.Value (allowed));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = g_simple_permission_new(allowed);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_g_simple_permission_get_type();
		static d_g_simple_permission_get_type g_simple_permission_get_type = FuncLoader.LoadFunction<d_g_simple_permission_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gio), "g_simple_permission_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_simple_permission_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
