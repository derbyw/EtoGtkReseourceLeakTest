// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FrameTimings : GLib.Opaque {

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gdk_frame_timings_get_complete(IntPtr raw);
		static d_gdk_frame_timings_get_complete gdk_frame_timings_get_complete = FuncLoader.LoadFunction<d_gdk_frame_timings_get_complete>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_complete"));

		public bool Complete { 
			get {
				bool raw_ret = gdk_frame_timings_get_complete(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long d_gdk_frame_timings_get_frame_counter(IntPtr raw);
		static d_gdk_frame_timings_get_frame_counter gdk_frame_timings_get_frame_counter = FuncLoader.LoadFunction<d_gdk_frame_timings_get_frame_counter>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_frame_counter"));

		public long FrameCounter { 
			get {
				long raw_ret = gdk_frame_timings_get_frame_counter(Handle);
				long ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long d_gdk_frame_timings_get_frame_time(IntPtr raw);
		static d_gdk_frame_timings_get_frame_time gdk_frame_timings_get_frame_time = FuncLoader.LoadFunction<d_gdk_frame_timings_get_frame_time>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_frame_time"));

		public long FrameTime { 
			get {
				long raw_ret = gdk_frame_timings_get_frame_time(Handle);
				long ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long d_gdk_frame_timings_get_predicted_presentation_time(IntPtr raw);
		static d_gdk_frame_timings_get_predicted_presentation_time gdk_frame_timings_get_predicted_presentation_time = FuncLoader.LoadFunction<d_gdk_frame_timings_get_predicted_presentation_time>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_predicted_presentation_time"));

		public long PredictedPresentationTime { 
			get {
				long raw_ret = gdk_frame_timings_get_predicted_presentation_time(Handle);
				long ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long d_gdk_frame_timings_get_presentation_time(IntPtr raw);
		static d_gdk_frame_timings_get_presentation_time gdk_frame_timings_get_presentation_time = FuncLoader.LoadFunction<d_gdk_frame_timings_get_presentation_time>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_presentation_time"));

		public long PresentationTime { 
			get {
				long raw_ret = gdk_frame_timings_get_presentation_time(Handle);
				long ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long d_gdk_frame_timings_get_refresh_interval(IntPtr raw);
		static d_gdk_frame_timings_get_refresh_interval gdk_frame_timings_get_refresh_interval = FuncLoader.LoadFunction<d_gdk_frame_timings_get_refresh_interval>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_refresh_interval"));

		public long RefreshInterval { 
			get {
				long raw_ret = gdk_frame_timings_get_refresh_interval(Handle);
				long ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gdk_frame_timings_get_type();
		static d_gdk_frame_timings_get_type gdk_frame_timings_get_type = FuncLoader.LoadFunction<d_gdk_frame_timings_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_get_type"));

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_frame_timings_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public FrameTimings(IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gdk_frame_timings_ref(IntPtr raw);
		static d_gdk_frame_timings_ref gdk_frame_timings_ref = FuncLoader.LoadFunction<d_gdk_frame_timings_ref>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_ref"));

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gdk_frame_timings_ref (raw);
				Owned = true;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gdk_frame_timings_unref(IntPtr raw);
		static d_gdk_frame_timings_unref gdk_frame_timings_unref = FuncLoader.LoadFunction<d_gdk_frame_timings_unref>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Gdk), "gdk_frame_timings_unref"));

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gdk_frame_timings_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;
			public uint timeoutHandlerId;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gdk_frame_timings_unref (handle);
				GLib.Timeout.Remove(timeoutHandlerId);
				return false;
			}
		}

		~FrameTimings ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			info.timeoutHandlerId = GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
