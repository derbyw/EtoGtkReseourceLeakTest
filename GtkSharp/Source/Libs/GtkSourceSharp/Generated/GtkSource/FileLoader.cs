// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSource {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class FileLoader : GLib.Object {

		public FileLoader (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_new(IntPtr buffer, IntPtr file);
		static d_gtk_source_file_loader_new gtk_source_file_loader_new = FuncLoader.LoadFunction<d_gtk_source_file_loader_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_new"));

		public FileLoader (GtkSource.Buffer buffer, GtkSource.File file) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileLoader)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				if (file != null) {
					names.Add ("file");
					vals.Add (new GLib.Value (file));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = gtk_source_file_loader_new(buffer == null ? IntPtr.Zero : buffer.Handle, file == null ? IntPtr.Zero : file.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_new_from_stream(IntPtr buffer, IntPtr file, IntPtr stream);
		static d_gtk_source_file_loader_new_from_stream gtk_source_file_loader_new_from_stream = FuncLoader.LoadFunction<d_gtk_source_file_loader_new_from_stream>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_new_from_stream"));

		public FileLoader (GtkSource.Buffer buffer, GtkSource.File file, GLib.InputStream stream) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileLoader)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				if (file != null) {
					names.Add ("file");
					vals.Add (new GLib.Value (file));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = gtk_source_file_loader_new_from_stream(buffer == null ? IntPtr.Zero : buffer.Handle, file == null ? IntPtr.Zero : file.Handle, stream == null ? IntPtr.Zero : stream.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_get_buffer(IntPtr raw);
		static d_gtk_source_file_loader_get_buffer gtk_source_file_loader_get_buffer = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_buffer>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_buffer"));

		[GLib.Property ("buffer")]
		public GtkSource.Buffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_file_loader_get_buffer(Handle);
				GtkSource.Buffer ret = GLib.Object.GetObject(raw_ret) as GtkSource.Buffer;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_get_file(IntPtr raw);
		static d_gtk_source_file_loader_get_file gtk_source_file_loader_get_file = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_file>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_file"));

		[GLib.Property ("file")]
		public GtkSource.File File {
			get  {
				IntPtr raw_ret = gtk_source_file_loader_get_file(Handle);
				GtkSource.File ret = GLib.Object.GetObject(raw_ret) as GtkSource.File;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_get_location(IntPtr raw);
		static d_gtk_source_file_loader_get_location gtk_source_file_loader_get_location = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_location>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_location"));

		[GLib.Property ("location")]
		public GLib.IFile Location {
			get  {
				IntPtr raw_ret = gtk_source_file_loader_get_location(Handle);
				GLib.IFile ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_get_input_stream(IntPtr raw);
		static d_gtk_source_file_loader_get_input_stream gtk_source_file_loader_get_input_stream = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_input_stream>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_input_stream"));

		[GLib.Property ("input-stream")]
		public GLib.InputStream InputStream {
			get  {
				IntPtr raw_ret = gtk_source_file_loader_get_input_stream(Handle);
				GLib.InputStream ret = GLib.Object.GetObject(raw_ret) as GLib.InputStream;
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("padding"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 10 // padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_source_file_loader_error_quark();
		static d_gtk_source_file_loader_error_quark gtk_source_file_loader_error_quark = FuncLoader.LoadFunction<d_gtk_source_file_loader_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_error_quark"));

		public static int ErrorQuark() {
			int raw_ret = gtk_source_file_loader_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_source_file_loader_get_compression_type(IntPtr raw);
		static d_gtk_source_file_loader_get_compression_type gtk_source_file_loader_get_compression_type = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_compression_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_compression_type"));

		public GtkSource.CompressionType CompressionType { 
			get {
				int raw_ret = gtk_source_file_loader_get_compression_type(Handle);
				GtkSource.CompressionType ret = (GtkSource.CompressionType) raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_get_encoding(IntPtr raw);
		static d_gtk_source_file_loader_get_encoding gtk_source_file_loader_get_encoding = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_encoding>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_encoding"));

		public GtkSource.Encoding Encoding { 
			get {
				IntPtr raw_ret = gtk_source_file_loader_get_encoding(Handle);
				GtkSource.Encoding ret = raw_ret == IntPtr.Zero ? null : (GtkSource.Encoding) GLib.Opaque.GetOpaque (raw_ret, typeof (GtkSource.Encoding), false);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_source_file_loader_get_newline_type(IntPtr raw);
		static d_gtk_source_file_loader_get_newline_type gtk_source_file_loader_get_newline_type = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_newline_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_newline_type"));

		public GtkSource.NewlineType NewlineType { 
			get {
				int raw_ret = gtk_source_file_loader_get_newline_type(Handle);
				GtkSource.NewlineType ret = (GtkSource.NewlineType) raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_file_loader_get_type();
		static d_gtk_source_file_loader_get_type gtk_source_file_loader_get_type = FuncLoader.LoadFunction<d_gtk_source_file_loader_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_file_loader_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_file_loader_load_async(IntPtr raw, int io_priority, IntPtr cancellable, GLibSharp.FileProgressCallbackNative progress_callback, IntPtr progress_callback_data, GLib.DestroyNotify progress_callback_notify, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_gtk_source_file_loader_load_async gtk_source_file_loader_load_async = FuncLoader.LoadFunction<d_gtk_source_file_loader_load_async>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_load_async"));

		public void LoadAsync(int io_priority, GLib.Cancellable cancellable, GLib.FileProgressCallback progress_callback, GLib.DestroyNotify progress_callback_notify, GLib.AsyncReadyCallback cb) {
			GLibSharp.FileProgressCallbackWrapper progress_callback_wrapper = new GLibSharp.FileProgressCallbackWrapper (progress_callback);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			gtk_source_file_loader_load_async(Handle, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, progress_callback_wrapper.NativeDelegate, IntPtr.Zero, progress_callback_notify, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_file_loader_load_finish(IntPtr raw, IntPtr result, out IntPtr error);
		static d_gtk_source_file_loader_load_finish gtk_source_file_loader_load_finish = FuncLoader.LoadFunction<d_gtk_source_file_loader_load_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_load_finish"));

		public unsafe bool LoadFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_source_file_loader_load_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_file_loader_set_candidate_encodings(IntPtr raw, IntPtr candidate_encodings);
		static d_gtk_source_file_loader_set_candidate_encodings gtk_source_file_loader_set_candidate_encodings = FuncLoader.LoadFunction<d_gtk_source_file_loader_set_candidate_encodings>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_file_loader_set_candidate_encodings"));

		public GLib.SList CandidateEncodings { 
			set {
				gtk_source_file_loader_set_candidate_encodings(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		static FileLoader ()
		{
			GtkSharp.GtkSourceSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
