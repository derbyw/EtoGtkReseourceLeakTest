// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSource {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class SpaceDrawer : GLib.Object {

		public SpaceDrawer (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_space_drawer_new();
		static d_gtk_source_space_drawer_new gtk_source_space_drawer_new = FuncLoader.LoadFunction<d_gtk_source_space_drawer_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_new"));

		public SpaceDrawer () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SpaceDrawer)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			owned = true;
			Raw = gtk_source_space_drawer_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_space_drawer_get_enable_matrix(IntPtr raw);
		static d_gtk_source_space_drawer_get_enable_matrix gtk_source_space_drawer_get_enable_matrix = FuncLoader.LoadFunction<d_gtk_source_space_drawer_get_enable_matrix>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_get_enable_matrix"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_space_drawer_set_enable_matrix(IntPtr raw, bool enable_matrix);
		static d_gtk_source_space_drawer_set_enable_matrix gtk_source_space_drawer_set_enable_matrix = FuncLoader.LoadFunction<d_gtk_source_space_drawer_set_enable_matrix>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_set_enable_matrix"));

		[GLib.Property ("enable-matrix")]
		public bool EnableMatrix {
			get  {
				bool raw_ret = gtk_source_space_drawer_get_enable_matrix(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_space_drawer_set_enable_matrix(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_space_drawer_get_matrix(IntPtr raw);
		static d_gtk_source_space_drawer_get_matrix gtk_source_space_drawer_get_matrix = FuncLoader.LoadFunction<d_gtk_source_space_drawer_get_matrix>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_get_matrix"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_space_drawer_set_matrix(IntPtr raw, IntPtr matrix);
		static d_gtk_source_space_drawer_set_matrix gtk_source_space_drawer_set_matrix = FuncLoader.LoadFunction<d_gtk_source_space_drawer_set_matrix>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_set_matrix"));

		[GLib.Property ("matrix")]
		public GLib.Variant Matrix {
			get  {
				IntPtr raw_ret = gtk_source_space_drawer_get_matrix(Handle);
				GLib.Variant ret = new GLib.Variant(raw_ret);
				return ret;
			}
			set  {
				gtk_source_space_drawer_set_matrix(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("padding"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 20 // padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_space_drawer_bind_matrix_setting(IntPtr raw, IntPtr settings, IntPtr key, int flags);
		static d_gtk_source_space_drawer_bind_matrix_setting gtk_source_space_drawer_bind_matrix_setting = FuncLoader.LoadFunction<d_gtk_source_space_drawer_bind_matrix_setting>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_bind_matrix_setting"));

		public void BindMatrixSetting(GLib.Settings settings, string key, GLib.SettingsBindFlags flags) {
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gtk_source_space_drawer_bind_matrix_setting(Handle, settings == null ? IntPtr.Zero : settings.Handle, native_key, (int) flags);
			GLib.Marshaller.Free (native_key);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_space_drawer_get_type();
		static d_gtk_source_space_drawer_get_type gtk_source_space_drawer_get_type = FuncLoader.LoadFunction<d_gtk_source_space_drawer_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_space_drawer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_source_space_drawer_get_types_for_locations(IntPtr raw, int locations);
		static d_gtk_source_space_drawer_get_types_for_locations gtk_source_space_drawer_get_types_for_locations = FuncLoader.LoadFunction<d_gtk_source_space_drawer_get_types_for_locations>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_get_types_for_locations"));

		public GtkSource.SpaceTypeFlags GetTypesForLocations(GtkSource.SpaceLocationFlags locations) {
			int raw_ret = gtk_source_space_drawer_get_types_for_locations(Handle, (int) locations);
			GtkSource.SpaceTypeFlags ret = (GtkSource.SpaceTypeFlags) raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_space_drawer_set_types_for_locations(IntPtr raw, int locations, int types);
		static d_gtk_source_space_drawer_set_types_for_locations gtk_source_space_drawer_set_types_for_locations = FuncLoader.LoadFunction<d_gtk_source_space_drawer_set_types_for_locations>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_space_drawer_set_types_for_locations"));

		public void SetTypesForLocations(GtkSource.SpaceLocationFlags locations, GtkSource.SpaceTypeFlags types) {
			gtk_source_space_drawer_set_types_for_locations(Handle, (int) locations, (int) types);
		}


		static SpaceDrawer ()
		{
			GtkSharp.GtkSourceSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
