// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSource {

	using System;

#region Autogenerated code
	public partial interface ICompletionProvider : GLib.IWrapper {

		bool ActivateProposal(GtkSource.ICompletionProposal proposal, Gtk.TextIter iter);
		GtkSource.CompletionActivation Activation { 
			get;
		}
		GLib.IIcon Gicon { 
			get;
		}
		Gdk.Pixbuf Icon { 
			get;
		}
		string IconName { 
			get;
		}
		Gtk.Widget GetInfoWidget(GtkSource.ICompletionProposal proposal);
		int InteractiveDelay { 
			get;
		}
		string Name { 
			get;
		}
		int Priority { 
			get;
		}
		bool GetStartIter(GtkSource.CompletionContext context, GtkSource.ICompletionProposal proposal, Gtk.TextIter iter);
		bool Match(GtkSource.CompletionContext context);
		void Populate(GtkSource.CompletionContext context);
		void UpdateInfo(GtkSource.ICompletionProposal proposal, GtkSource.CompletionInfo info);
	}

	[GLib.GInterface (typeof (CompletionProviderAdapter))]
	public partial interface ICompletionProviderImplementor : GLib.IWrapper {

		string Name { get; }
		Gdk.Pixbuf Icon { get; }
		string IconName { get; }
		GLib.IIcon Gicon { get; }
		void Populate (GtkSource.CompletionContext context);
		bool Match (GtkSource.CompletionContext context);
		GtkSource.CompletionActivation Activation { get; }
		Gtk.Widget GetInfoWidget (GtkSource.ICompletionProposal proposal);
		void UpdateInfo (GtkSource.ICompletionProposal proposal, GtkSource.CompletionInfo info);
		bool GetStartIter (GtkSource.CompletionContext context, GtkSource.ICompletionProposal proposal, Gtk.TextIter iter);
		bool ActivateProposal (GtkSource.ICompletionProposal proposal, Gtk.TextIter iter);
		int InteractiveDelay { get; }
		int Priority { get; }
	}
#endregion
}
