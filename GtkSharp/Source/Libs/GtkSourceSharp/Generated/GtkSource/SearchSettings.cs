// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSource {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class SearchSettings : GLib.Object {

		public SearchSettings (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_search_settings_new();
		static d_gtk_source_search_settings_new gtk_source_search_settings_new = FuncLoader.LoadFunction<d_gtk_source_search_settings_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_new"));

		public SearchSettings () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SearchSettings)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			owned = true;
			Raw = gtk_source_search_settings_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_search_settings_get_search_text(IntPtr raw);
		static d_gtk_source_search_settings_get_search_text gtk_source_search_settings_get_search_text = FuncLoader.LoadFunction<d_gtk_source_search_settings_get_search_text>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_get_search_text"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_search_settings_set_search_text(IntPtr raw, IntPtr search_text);
		static d_gtk_source_search_settings_set_search_text gtk_source_search_settings_set_search_text = FuncLoader.LoadFunction<d_gtk_source_search_settings_set_search_text>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_set_search_text"));

		[GLib.Property ("search-text")]
		public string SearchText {
			get  {
				IntPtr raw_ret = gtk_source_search_settings_get_search_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_search_settings_set_search_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_search_settings_get_case_sensitive(IntPtr raw);
		static d_gtk_source_search_settings_get_case_sensitive gtk_source_search_settings_get_case_sensitive = FuncLoader.LoadFunction<d_gtk_source_search_settings_get_case_sensitive>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_get_case_sensitive"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_search_settings_set_case_sensitive(IntPtr raw, bool case_sensitive);
		static d_gtk_source_search_settings_set_case_sensitive gtk_source_search_settings_set_case_sensitive = FuncLoader.LoadFunction<d_gtk_source_search_settings_set_case_sensitive>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_set_case_sensitive"));

		[GLib.Property ("case-sensitive")]
		public bool CaseSensitive {
			get  {
				bool raw_ret = gtk_source_search_settings_get_case_sensitive(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_case_sensitive(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_search_settings_get_at_word_boundaries(IntPtr raw);
		static d_gtk_source_search_settings_get_at_word_boundaries gtk_source_search_settings_get_at_word_boundaries = FuncLoader.LoadFunction<d_gtk_source_search_settings_get_at_word_boundaries>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_get_at_word_boundaries"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_search_settings_set_at_word_boundaries(IntPtr raw, bool at_word_boundaries);
		static d_gtk_source_search_settings_set_at_word_boundaries gtk_source_search_settings_set_at_word_boundaries = FuncLoader.LoadFunction<d_gtk_source_search_settings_set_at_word_boundaries>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_set_at_word_boundaries"));

		[GLib.Property ("at-word-boundaries")]
		public bool AtWordBoundaries {
			get  {
				bool raw_ret = gtk_source_search_settings_get_at_word_boundaries(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_at_word_boundaries(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_search_settings_get_wrap_around(IntPtr raw);
		static d_gtk_source_search_settings_get_wrap_around gtk_source_search_settings_get_wrap_around = FuncLoader.LoadFunction<d_gtk_source_search_settings_get_wrap_around>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_get_wrap_around"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_search_settings_set_wrap_around(IntPtr raw, bool wrap_around);
		static d_gtk_source_search_settings_set_wrap_around gtk_source_search_settings_set_wrap_around = FuncLoader.LoadFunction<d_gtk_source_search_settings_set_wrap_around>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_set_wrap_around"));

		[GLib.Property ("wrap-around")]
		public bool WrapAround {
			get  {
				bool raw_ret = gtk_source_search_settings_get_wrap_around(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_wrap_around(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_search_settings_get_regex_enabled(IntPtr raw);
		static d_gtk_source_search_settings_get_regex_enabled gtk_source_search_settings_get_regex_enabled = FuncLoader.LoadFunction<d_gtk_source_search_settings_get_regex_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_get_regex_enabled"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_search_settings_set_regex_enabled(IntPtr raw, bool regex_enabled);
		static d_gtk_source_search_settings_set_regex_enabled gtk_source_search_settings_set_regex_enabled = FuncLoader.LoadFunction<d_gtk_source_search_settings_set_regex_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_set_regex_enabled"));

		[GLib.Property ("regex-enabled")]
		public bool RegexEnabled {
			get  {
				bool raw_ret = gtk_source_search_settings_get_regex_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_regex_enabled(Handle, value);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("padding"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 10 // padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_search_settings_get_type();
		static d_gtk_source_search_settings_get_type gtk_source_search_settings_get_type = FuncLoader.LoadFunction<d_gtk_source_search_settings_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_search_settings_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_search_settings_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static SearchSettings ()
		{
			GtkSharp.GtkSourceSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
