// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSource {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class PrintCompositor : GLib.Object {

		public PrintCompositor (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_new(IntPtr buffer);
		static d_gtk_source_print_compositor_new gtk_source_print_compositor_new = FuncLoader.LoadFunction<d_gtk_source_print_compositor_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_new"));

		public PrintCompositor (GtkSource.Buffer buffer) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintCompositor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = gtk_source_print_compositor_new(buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_new_from_view(IntPtr view);
		static d_gtk_source_print_compositor_new_from_view gtk_source_print_compositor_new_from_view = FuncLoader.LoadFunction<d_gtk_source_print_compositor_new_from_view>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_new_from_view"));

		public PrintCompositor (GtkSource.SourceView view) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintCompositor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			owned = true;
			Raw = gtk_source_print_compositor_new_from_view(view == null ? IntPtr.Zero : view.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_get_buffer(IntPtr raw);
		static d_gtk_source_print_compositor_get_buffer gtk_source_print_compositor_get_buffer = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_buffer>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_buffer"));

		[GLib.Property ("buffer")]
		public GtkSource.Buffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_buffer(Handle);
				GtkSource.Buffer ret = GLib.Object.GetObject(raw_ret) as GtkSource.Buffer;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_gtk_source_print_compositor_get_tab_width(IntPtr raw);
		static d_gtk_source_print_compositor_get_tab_width gtk_source_print_compositor_get_tab_width = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_tab_width>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_tab_width"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_tab_width(IntPtr raw, uint width);
		static d_gtk_source_print_compositor_set_tab_width gtk_source_print_compositor_set_tab_width = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_tab_width>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_tab_width"));

		[GLib.Property ("tab-width")]
		public uint TabWidth {
			get  {
				uint raw_ret = gtk_source_print_compositor_get_tab_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_tab_width(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_source_print_compositor_get_wrap_mode(IntPtr raw);
		static d_gtk_source_print_compositor_get_wrap_mode gtk_source_print_compositor_get_wrap_mode = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_wrap_mode>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_wrap_mode"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_wrap_mode(IntPtr raw, int wrap_mode);
		static d_gtk_source_print_compositor_set_wrap_mode gtk_source_print_compositor_set_wrap_mode = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_wrap_mode>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_wrap_mode"));

		[GLib.Property ("wrap-mode")]
		public Gtk.WrapMode WrapMode {
			get  {
				int raw_ret = gtk_source_print_compositor_get_wrap_mode(Handle);
				Gtk.WrapMode ret = (Gtk.WrapMode) raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_wrap_mode(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_print_compositor_get_highlight_syntax(IntPtr raw);
		static d_gtk_source_print_compositor_get_highlight_syntax gtk_source_print_compositor_get_highlight_syntax = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_highlight_syntax>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_highlight_syntax"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_highlight_syntax(IntPtr raw, bool highlight);
		static d_gtk_source_print_compositor_set_highlight_syntax gtk_source_print_compositor_set_highlight_syntax = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_highlight_syntax>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_highlight_syntax"));

		[GLib.Property ("highlight-syntax")]
		public bool HighlightSyntax {
			get  {
				bool raw_ret = gtk_source_print_compositor_get_highlight_syntax(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_highlight_syntax(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_gtk_source_print_compositor_get_print_line_numbers(IntPtr raw);
		static d_gtk_source_print_compositor_get_print_line_numbers gtk_source_print_compositor_get_print_line_numbers = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_print_line_numbers>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_print_line_numbers"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_print_line_numbers(IntPtr raw, uint interval);
		static d_gtk_source_print_compositor_set_print_line_numbers gtk_source_print_compositor_set_print_line_numbers = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_print_line_numbers>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_print_line_numbers"));

		[GLib.Property ("print-line-numbers")]
		public uint PrintLineNumbers {
			get  {
				uint raw_ret = gtk_source_print_compositor_get_print_line_numbers(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_print_line_numbers(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_print_compositor_get_print_header(IntPtr raw);
		static d_gtk_source_print_compositor_get_print_header gtk_source_print_compositor_get_print_header = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_print_header>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_print_header"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_print_header(IntPtr raw, bool print);
		static d_gtk_source_print_compositor_set_print_header gtk_source_print_compositor_set_print_header = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_print_header>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_print_header"));

		[GLib.Property ("print-header")]
		public bool PrintHeader {
			get  {
				bool raw_ret = gtk_source_print_compositor_get_print_header(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_print_header(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_print_compositor_get_print_footer(IntPtr raw);
		static d_gtk_source_print_compositor_get_print_footer gtk_source_print_compositor_get_print_footer = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_print_footer>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_print_footer"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_print_footer(IntPtr raw, bool print);
		static d_gtk_source_print_compositor_set_print_footer gtk_source_print_compositor_set_print_footer = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_print_footer>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_print_footer"));

		[GLib.Property ("print-footer")]
		public bool PrintFooter {
			get  {
				bool raw_ret = gtk_source_print_compositor_get_print_footer(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_print_footer(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_get_body_font_name(IntPtr raw);
		static d_gtk_source_print_compositor_get_body_font_name gtk_source_print_compositor_get_body_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_body_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_body_font_name"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_body_font_name(IntPtr raw, IntPtr font_name);
		static d_gtk_source_print_compositor_set_body_font_name gtk_source_print_compositor_set_body_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_body_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_body_font_name"));

		[GLib.Property ("body-font-name")]
		public string BodyFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_body_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_body_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_get_line_numbers_font_name(IntPtr raw);
		static d_gtk_source_print_compositor_get_line_numbers_font_name gtk_source_print_compositor_get_line_numbers_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_line_numbers_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_line_numbers_font_name"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_line_numbers_font_name(IntPtr raw, IntPtr font_name);
		static d_gtk_source_print_compositor_set_line_numbers_font_name gtk_source_print_compositor_set_line_numbers_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_line_numbers_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_line_numbers_font_name"));

		[GLib.Property ("line-numbers-font-name")]
		public string LineNumbersFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_line_numbers_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_line_numbers_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_get_header_font_name(IntPtr raw);
		static d_gtk_source_print_compositor_get_header_font_name gtk_source_print_compositor_get_header_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_header_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_header_font_name"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_header_font_name(IntPtr raw, IntPtr font_name);
		static d_gtk_source_print_compositor_set_header_font_name gtk_source_print_compositor_set_header_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_header_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_header_font_name"));

		[GLib.Property ("header-font-name")]
		public string HeaderFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_header_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_header_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_get_footer_font_name(IntPtr raw);
		static d_gtk_source_print_compositor_get_footer_font_name gtk_source_print_compositor_get_footer_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_footer_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_footer_font_name"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_footer_font_name(IntPtr raw, IntPtr font_name);
		static d_gtk_source_print_compositor_set_footer_font_name gtk_source_print_compositor_set_footer_font_name = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_footer_font_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_footer_font_name"));

		[GLib.Property ("footer-font-name")]
		public string FooterFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_footer_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_footer_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_gtk_source_print_compositor_get_n_pages(IntPtr raw);
		static d_gtk_source_print_compositor_get_n_pages gtk_source_print_compositor_get_n_pages = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_n_pages>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_n_pages"));

		[GLib.Property ("n-pages")]
		public int NPages {
			get  {
				int raw_ret = gtk_source_print_compositor_get_n_pages(Handle);
				int ret = raw_ret;
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("padding"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 10 // padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_draw_page(IntPtr raw, IntPtr context, int page_nr);
		static d_gtk_source_print_compositor_draw_page gtk_source_print_compositor_draw_page = FuncLoader.LoadFunction<d_gtk_source_print_compositor_draw_page>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_draw_page"));

		public void DrawPage(Gtk.PrintContext context, int page_nr) {
			gtk_source_print_compositor_draw_page(Handle, context == null ? IntPtr.Zero : context.Handle, page_nr);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate double d_gtk_source_print_compositor_get_bottom_margin(IntPtr raw, int unit);
		static d_gtk_source_print_compositor_get_bottom_margin gtk_source_print_compositor_get_bottom_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_bottom_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_bottom_margin"));

		public double GetBottomMargin(Gtk.Unit unit) {
			double raw_ret = gtk_source_print_compositor_get_bottom_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate double d_gtk_source_print_compositor_get_left_margin(IntPtr raw, int unit);
		static d_gtk_source_print_compositor_get_left_margin gtk_source_print_compositor_get_left_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_left_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_left_margin"));

		public double GetLeftMargin(Gtk.Unit unit) {
			double raw_ret = gtk_source_print_compositor_get_left_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate double d_gtk_source_print_compositor_get_pagination_progress(IntPtr raw);
		static d_gtk_source_print_compositor_get_pagination_progress gtk_source_print_compositor_get_pagination_progress = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_pagination_progress>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_pagination_progress"));

		public double PaginationProgress { 
			get {
				double raw_ret = gtk_source_print_compositor_get_pagination_progress(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate double d_gtk_source_print_compositor_get_right_margin(IntPtr raw, int unit);
		static d_gtk_source_print_compositor_get_right_margin gtk_source_print_compositor_get_right_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_right_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_right_margin"));

		public double GetRightMargin(Gtk.Unit unit) {
			double raw_ret = gtk_source_print_compositor_get_right_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate double d_gtk_source_print_compositor_get_top_margin(IntPtr raw, int unit);
		static d_gtk_source_print_compositor_get_top_margin gtk_source_print_compositor_get_top_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_top_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_top_margin"));

		public double GetTopMargin(Gtk.Unit unit) {
			double raw_ret = gtk_source_print_compositor_get_top_margin(Handle, (int) unit);
			double ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_print_compositor_get_type();
		static d_gtk_source_print_compositor_get_type gtk_source_print_compositor_get_type = FuncLoader.LoadFunction<d_gtk_source_print_compositor_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_print_compositor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_gtk_source_print_compositor_paginate(IntPtr raw, IntPtr context);
		static d_gtk_source_print_compositor_paginate gtk_source_print_compositor_paginate = FuncLoader.LoadFunction<d_gtk_source_print_compositor_paginate>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_paginate"));

		public bool Paginate(Gtk.PrintContext context) {
			bool raw_ret = gtk_source_print_compositor_paginate(Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_bottom_margin(IntPtr raw, double margin, int unit);
		static d_gtk_source_print_compositor_set_bottom_margin gtk_source_print_compositor_set_bottom_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_bottom_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_bottom_margin"));

		public void SetBottomMargin(double margin, Gtk.Unit unit) {
			gtk_source_print_compositor_set_bottom_margin(Handle, margin, (int) unit);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_footer_format(IntPtr raw, bool separator, IntPtr left, IntPtr center, IntPtr right);
		static d_gtk_source_print_compositor_set_footer_format gtk_source_print_compositor_set_footer_format = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_footer_format>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_footer_format"));

		public void SetFooterFormat(bool separator, string left, string center, string right) {
			IntPtr native_left = GLib.Marshaller.StringToPtrGStrdup (left);
			IntPtr native_center = GLib.Marshaller.StringToPtrGStrdup (center);
			IntPtr native_right = GLib.Marshaller.StringToPtrGStrdup (right);
			gtk_source_print_compositor_set_footer_format(Handle, separator, native_left, native_center, native_right);
			GLib.Marshaller.Free (native_left);
			GLib.Marshaller.Free (native_center);
			GLib.Marshaller.Free (native_right);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_header_format(IntPtr raw, bool separator, IntPtr left, IntPtr center, IntPtr right);
		static d_gtk_source_print_compositor_set_header_format gtk_source_print_compositor_set_header_format = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_header_format>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_header_format"));

		public void SetHeaderFormat(bool separator, string left, string center, string right) {
			IntPtr native_left = GLib.Marshaller.StringToPtrGStrdup (left);
			IntPtr native_center = GLib.Marshaller.StringToPtrGStrdup (center);
			IntPtr native_right = GLib.Marshaller.StringToPtrGStrdup (right);
			gtk_source_print_compositor_set_header_format(Handle, separator, native_left, native_center, native_right);
			GLib.Marshaller.Free (native_left);
			GLib.Marshaller.Free (native_center);
			GLib.Marshaller.Free (native_right);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_left_margin(IntPtr raw, double margin, int unit);
		static d_gtk_source_print_compositor_set_left_margin gtk_source_print_compositor_set_left_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_left_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_left_margin"));

		public void SetLeftMargin(double margin, Gtk.Unit unit) {
			gtk_source_print_compositor_set_left_margin(Handle, margin, (int) unit);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_right_margin(IntPtr raw, double margin, int unit);
		static d_gtk_source_print_compositor_set_right_margin gtk_source_print_compositor_set_right_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_right_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_right_margin"));

		public void SetRightMargin(double margin, Gtk.Unit unit) {
			gtk_source_print_compositor_set_right_margin(Handle, margin, (int) unit);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_print_compositor_set_top_margin(IntPtr raw, double margin, int unit);
		static d_gtk_source_print_compositor_set_top_margin gtk_source_print_compositor_set_top_margin = FuncLoader.LoadFunction<d_gtk_source_print_compositor_set_top_margin>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_print_compositor_set_top_margin"));

		public void SetTopMargin(double margin, Gtk.Unit unit) {
			gtk_source_print_compositor_set_top_margin(Handle, margin, (int) unit);
		}


		static PrintCompositor ()
		{
			GtkSharp.GtkSourceSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
