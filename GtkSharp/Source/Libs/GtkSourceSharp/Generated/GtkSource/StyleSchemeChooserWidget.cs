// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSource {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class StyleSchemeChooserWidget : Gtk.Bin, GtkSource.IStyleSchemeChooser {

		public StyleSchemeChooserWidget (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_style_scheme_chooser_widget_new();
		static d_gtk_source_style_scheme_chooser_widget_new gtk_source_style_scheme_chooser_widget_new = FuncLoader.LoadFunction<d_gtk_source_style_scheme_chooser_widget_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_style_scheme_chooser_widget_new"));

		public StyleSchemeChooserWidget () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StyleSchemeChooserWidget)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			owned = true;
			Raw = gtk_source_style_scheme_chooser_widget_new();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("padding"
							, Gtk.Bin.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 10 // padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_style_scheme_chooser_widget_get_type();
		static d_gtk_source_style_scheme_chooser_widget_get_type gtk_source_style_scheme_chooser_widget_get_type = FuncLoader.LoadFunction<d_gtk_source_style_scheme_chooser_widget_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_style_scheme_chooser_widget_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_gtk_source_style_scheme_chooser_get_style_scheme(IntPtr raw);
		static d_gtk_source_style_scheme_chooser_get_style_scheme gtk_source_style_scheme_chooser_get_style_scheme = FuncLoader.LoadFunction<d_gtk_source_style_scheme_chooser_get_style_scheme>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_style_scheme_chooser_get_style_scheme"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_gtk_source_style_scheme_chooser_set_style_scheme(IntPtr raw, IntPtr scheme);
		static d_gtk_source_style_scheme_chooser_set_style_scheme gtk_source_style_scheme_chooser_set_style_scheme = FuncLoader.LoadFunction<d_gtk_source_style_scheme_chooser_set_style_scheme>(FuncLoader.GetProcAddress(GLibrary.Load(Library.GtkSource), "gtk_source_style_scheme_chooser_set_style_scheme"));

		public GtkSource.StyleScheme StyleScheme { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_get_style_scheme(Handle);
				GtkSource.StyleScheme ret = GLib.Object.GetObject(raw_ret) as GtkSource.StyleScheme;
				return ret;
			}
			set {
				gtk_source_style_scheme_chooser_set_style_scheme(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		static StyleSchemeChooserWidget ()
		{
			GtkSharp.GtkSourceSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gtk.Bin.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
